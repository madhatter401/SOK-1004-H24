---
title: "62_SOK-1004 H24 - Case 1"
author: "Kandidatnr: 62"
format: pdf
editor: visual
---

Denne oppgaven er laget av Even S. Hvinden og oppdatert av Derek J. Clark. Sistnevnte er ansvarlig for eventuelle feil og mangler.

## Instruksjoner

Denne oppgaven skal løses interaktivt i RStudio ved å legge inn egen kode og kommentarer. Det ferdige dokumentet lagres med kandidatnummeret som navn `[kandidatnummer]_SOK1004_C1_H24.qmd` og lastes opp på deres GitHub-side. Hvis du har kandidatnummer 43, så vil filen hete `43_SOK1004_C1_H24.qmd`. Påse at koden kjører og at dere kan eksportere besvarelsen til pdf. Dere leverer lenken til GitHub-repositoriumet i Canvas (under oppgaver).

## Bakgrunn

Vi skal analysere utviklingen i bruttonasjonalprodukt (BNP) per person i Norge. Vi bruker data Statistisk Sentralbyrå (SSB), tabell "09842: BNP og andre hovedstørrelser (kr per innbygger), etter statistikkvariabel og år". Tabellen inneholder årlige data på BNP per innbygger, fra 1970 til 2023.

## I. API, visualisering

SSB gir oss tilgang til sine data via en [API](https://www.ssb.no/omssb/tjenester-og-verktoy/api) (*Application Programming Interface*), programvare som lar to applikasjoner kommunisere med hverandre. SSB tilbyr en API med [ferdige datasett](https://data.ssb.no/api/v0/dataset/). Her er det om lag 250 kontinuerlig oppdaterte datasett med en fast URL over de mest brukte tabellene i Statistikkbanken.

For å få tilgang til tabellen med bruttonasjonalprodukt må vi benytte tjenesten [PxWebApi](https://www.ssb.no/omssb/tjenester-og-verktoy/api/px-api). Her finner du en [API konsoll](https://data.ssb.no/api/v0/no/console/) med en søkefunksjon. Prøv å søk på "`bnp`" og merk forslaget: tabell 09842. Søk på denne, og noter URL-en. Den vil vi bruke etterpå.

Til å laste ned dataene skal vi bruke en R-pakke, [PxWebApiData](https://cran.r-project.org/web/packages/PxWebApiData/index.html), som SSB har laget. I første omgang skal vi bruke funksjonen `ApiData()`. Syntaksen er ikke den samme som i `tidyverse`, og har noen litt uvante egenskaper, herunder lagring i tegnformat og en kombinasjon av norsk og engelsk.

**Tips:** Det er typisk instruktivt å se på [eksempel på bruk](https://cran.r-project.org/web/packages/PxWebApiData/vignettes/Introduction.html). Da har man et intuitivt utgangspunkt for hvordan koden kan brukes.

Jeg vil nå vise dere trinnvis hvordan å laste ned dataene. Formålet er å gi dere en idé på hvordan man kan lære seg å bruke en ny pakke eller funksjon. Vi begynner med å laste inn nødvendige pakker:

```{r}
rm(list=ls())
library(tidyverse)
library(PxWebApiData)
```

**NB!** Du må installere `PxWebApiData` først. Kjør kommandoen `install.packages("PxWebApiData")` i konsollen. Det må kun gjøres én gang.

Vi bruker funksjonen `ApiData()` til å hente tabell 09842. Som notert ovenfor fant vi URL-en ved hjelp av søkefunksjonen til SSB. Først prøver vi å laste ned dataene direkte, uten ytterligere tilvalg, og tar en titt på hva vi får.

```{r}
lenke <- "https://data.ssb.no/api/v0/no/table/09842"

df <- lenke %>%
  ApiData()

df %>%
  print()
```

**Merk følgende:** `df` inneholder to datasett i formatet `data.frame`. Datasettene heter `"09842: BNP og andre hovedstørrelser (kr per innbygger), etter statistikkvariabel og år"` og `dataset`. Datasettene inneholder 9 verdier av 3 variabler. Variabelen `value` er identisk. Variablene `år` og `Tid` inneholder de identiske verdiene `"1970"`, `"2022"` og `"2023"`. Merk at disse er i tegnformat `<chr>` (derav anførselstegnene) og ikke en numerisk verdi, for eksempel `<dbl>`. Variabelen `statistikkvariabel` og `ContentsCode` inneholder henholdsvis verdiene `BNP`, `KonsumHIO` `MEMOBNP` og `Bruttonasjonalprodukt, Konsum i husholdninger og ideelle organisasjoner` og `MEMO: Bruttonasjonalprodukt. Faste 2015-priser`.

Vi har altså ikke fått hele tabell 09842, men verdiene for tre statistikkvariabler over tre tidsperioder, lagret med forskjellige variabelnavn og verdier.

Det vi trenger er **metadata**: Informasjon som beskriver innholdet i dataene, slik at vi kan filtrere API-spørringen. Kjør følgende kode.

```{r}
metadata <- lenke %>%
  ApiData(returnMetaData = TRUE)
```

Åpner vi listen `metadata` fra minnet så kan vi se nærmere på den i øvre venstre vindu i Rstudio. Her ser vi to lister kalt `[[1]]` og `[[2]]`. Listene beskriver variablene vi kan filtrere på. Liste `[[1]]` har fire variable: `code`, `text`, `values`, og `valueTexts`. Alle variablene er `<chr>`. Liste `[[2]]` har de samme foregående fire variablene samt en variabel `time`.

-   `code` viser navnene på variablene vi bruker i funksjonen `ApiData()` for å filtrere. Den tar verdiene `ContentsCode` og `Tid`. Legg merke til at utviklerne i SSB her blander norsk og engelsk.

-   `text` er en unik tekstverdi tilknyttet verdien på `code` som forklarer hva vi ser på. Den tar verdien `statistikkvariabel` og `år`. Vi kan altså filtrere på statistikkvariabel og år.

-   `values` viser hvilke verdier av statistikkvariabel og år vi kan velge, med henholdsvis 6 og 54 forskjellige verdier. Du vil kjenne igjen tre av hver fra den første spørringen ovenfor.

-   `valueTexts` gir en unik tekstverdi tilknyttet verdien på `values` som forklarer oss hva vi ser på. For `Tid` og `år` er de identiske, men for `ContentsCode` og `statistikkvariabel` får vi en mer fullstendig forklaring.

-   `time` er en logisk variabel, og tar derfor to verdier: `TRUE` og `FALSE`. I dette tilfellet indikerer den at variabelen `Tid` måler tid, hvilket gjør at funksjonene i pakken vil behandle `Tid` på en annen måte enn en statistikkvariabel.

Vi har nå informasjonen vi trenger til å laste ned BNP-tall mellom 1970 og 2023. Jeg velger å ta BNP med både løpende og faste priser.

```{r}
df <- lenke %>% 
  ApiData(Tid = paste(1970:2023), ContentsCode = c("BNP","MEMOBNP"))
```

På venstre side av likhetstegnet bruker vi `code` fra metadata. På høyre side velger vi verdier fra `values`. Merk at jeg bruker funksjonen `paste()` for å konvertere numeriske verdier, for eksempel `<dbl>` til tegn `<chr>`.

La oss rydde i data. Det er tre ting å ta tak i:

1.  `df` lagrer informasjonen i to tabeller med samme informasjon, som vist over. Det er unødvendig.

2.  Årstallene er lagret som tegn, `<chr>`. Disse skulle heller være heltall, `<int>`.

3.  Formatet `data.frame` er underlegent `tibble`.

### Oppgave Ia: Rydd i data

Skriv kode som lagrer dataene som én tibble med anstendige variabelnavn og årstall som heltall. Fremover bruker jeg "var", "tid", og "verdi" for "statistikkvariabel", "Tid", og "value".

```{r}
# Oppgave Ia løses her 

#Omgjør listen df til å kun inneholde datasettet "dataset" og lagrer det som en tibble. 
df <- df$dataset %>%
  as_tibble()


#Endrer navnet på de tre kolonnene i datasettet.
df <- df %>%
  rename(var = ContentsCode, tid = Tid, verdi = value)


#Endrer årstallene fra tekst til heltall ved å gjøre om variabelen tid fra chr til int.
df <- df %>%
  mutate(tid=as.integer(tid))



```

### Oppgave Ib: Lag en figur

Følgende kode skaper en enkel figur.

```{r}
df %>%
  filter(var == "BNP") %>%
  ggplot(aes(x=tid,y=verdi)) +
  geom_line()
```

Lag en pen figur som viser BNP i tusener av kroner per person, i både løpende og faste priser, mellom 2000 og 2023. Skriv en tydelig forklaring og tolkning av figuren. Hvordan har inntektene utviklet seg? Forklar forskjellen mellom BNP i løpende og faste priser. Til hvilke formål er de mest relevante?

```{r}
# Oppgave Ib løses her 

#Setter lokaliteten til norsk bokmål med UTF-8. Dette for å riktig fremstille norske bokstaver i grafen under.
Sys.setlocale("LC_CTYPE", "nb_NO.UTF-8")

df %>%
  filter(var %in% c("BNP", "MEMOBNP")) %>%
  filter(tid %in% 2000:2023) %>%
  ggplot(aes(x = tid, y = verdi/1000, color = var)) +
  geom_line(linewidth = 1) +
  theme_minimal() +
  labs(x = "Årstall", y = "BNP i TNOK", color = "", title = "BNP per innbygger") +
  scale_color_discrete(labels = c("Løpende BNP", "Fast BNP")) +
  theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5)) 
 
  

 
  
    
    
  
```

Denne figuren viser utviklingen av løpende BNP og fast BNP (justert til 2015-priser) per innbygger i perioden 2000 til 2023. Figuren gir en enkel visuell fremstilling av den økonomiske utviklingen, samt forholdet mellom disse to måtene å måle BNP på. X-aksen viser årstall og Y-aksen viser BNP i tusen kroner.

Vi ser på figuren ovenfor at både løpende BNP og fast BNP har økt betydelig siden årtusenskiftet. Selv om BNP har jevnt steget over perioden, så ser vi at noen år har det vært negativ vekst. Det er mange faktorer som kan spille en rolle her, men det er plausibelt å tenke at nedgangen rundt 2008-2009 skyldes finanskrisen. COVID spilte sannsynligvis en stor rolle i nedgangen rundt 2019-2020. Det er også en negativ vekst helt på tampen i 2023, en av hovedårsakene her kan være kraftige renteøkninger fra Norges Bank.\
\
Løpende BNP har hatt en mye mer drastisk økning enn fast BNP, dette skyldes naturen i hva disse begrepene beskriver. Løpende BNP, også kalt nominell BNP påvirkes av prisnivået på daværende tidspunkt. Årsaken til at løpende BNP har en mye brattere kurve enn fast BNP er nettopp da på grunn av inflasjonen mellom 2000 og 2023. Derimot, når vi ser på fast BNP så er ikke inflasjon lenger enn faktor, og dette på fordi alle årene bruker samme prisindeks, i dette tilfellet prisene fra år 2015. Siden fast BNP ekskulderer inflasjon er stigningen mye mer beskjeden.

Når det gjelder hvilke av disse måtene å måle BNP på som er mest hensiktsmessig for ulike formål, kan man si det slik. BNP i løpende priser er den foretatte måten for å måle verdien i et spesifikt år, for eksempel for å måle BNP i forhold til gjeld eller statsbudsjett. BNP i faste priser er mer relevant hvis man skal se på den økonomiske utviklingen over tid. Dette er relevant for historiske analyser, politikk og økonomisk planlegging i fremtiden.

## II. Transformasjon, visualisering

Våre data er en tidsserie, hvilket betyr at rekkefølgen i observasjonene er ordnet etter tid. Vi skal nå regne prosentvis, årlig endring. La $x_t$ være BNP i år $t$. For eksempel vil $x_{1970}$ være $23616$.

Den årlige endringen i BNP fra år $t-1$ til $t$ er gitt ved $x_{t}-x_{t-1}$. I samfunnsøkonomi er det vanlig å betegne dette som $\Delta x_{t} := x_{t}-x_{t-1}$. Tegnet $\Delta$ er den greske bokstaven delta og betegner differanse. For eksempel vil $\Delta x_{1971}=26363-23616=2747$ kroner.

I mange tilfeller er vi interesserte i relativ vekst: Hvor mye økte BNP, relativt til hva den var i utgangspunkt? Den mest brukte enheten er hundredeler eller prosentvis endring, gitt ved $100 \times \Delta x_{t}/x_{t-1}$. For eksempel var den prosentvise endringen i BNP i 1971 $100 \times \Delta x_{1971}/x_{1970}=100\times(2747/23616)\approx11.6$, hvor $\approx$ betegner "omtrent lik" da jeg viser svaret med kun én desimal. Tilsvarende kan man skrive at $\Delta x_{1971}/x_{1970}=2747/23616\approx0.116=11.6\%$, hvor tegnet $\%$ betegner at beløpet oppgis i hundredeler eller prosent.

## Oppgave IIa: Omorganisere datasett med `pivot_wider()`

Vi skal lage to variable `dBNP` og `dMEMOBNP` som viser relativ endring i `BNP` og `MEMOBNP`. Til dette formålet skal vi bruke kommandoene `pivot_wide()` og `pivot_long()` til å omorganisere dataene. Jeg anbefaler dere først å lese [kapittel 5.3/5.4](https://r4ds.hadley.nz/data-tidy#sec-pivoting) i pensum. Betrakt følgende kode.

```{r}
df_wide <- df %>%
  pivot_wider(names_from = var, values_from = verdi) 
```

Beskriv konkret hva koden gjorde. Sammenlign `df` og `df_wide`.

*Denne koden henter verdier fra df og lager en ny tabell kalt df_wide som gjør BNP og MEMOBNP til kolonner med rader som inneholder verdiene fra "verdi" kolonnen i df.*

df_wide gir oss en tabell med de samme verdiene som df har, men strukturert på en annen måte. Den bytter ut kolonnene "var", "tid" og "verdi" med "tid", "BNP", og "MEMOBNP". Vi får med dette en mer oversiktlig tabell som er halvert i lengde.

## Oppgave IIb: Beregn vekst

Til å beregne endring er funksjonen `lag()` meget nyttig. I denne konteksten er begrepet *lag* et engelsk verb som beskriver foregående observasjon. Bruker vi funksjonen `lag()` på en variabel (kolonne) så returnerer den en ny kolonne hvor verdien er lik foregående observasjon. Betrakt følgende kode:

```{r}
df_wide <- df_wide %>%
  mutate(LBNP = lag(BNP,n=1L)) %>%
  mutate(LMEMOBNP = lag(MEMOBNP,n=1L))

# legger variablene i rekkefølge

df_wide <- df_wide %>%
  relocate("LBNP", .before = "MEMOBNP")

df_wide
```

Hvis vi bruker den matematiske notasjonen diskutert tidligere så har vi nå kolonner med $x_{t}$ (`BNP`, `MEMOBNP`) og $x_{t-1}$ (`LBNP`, `LMEMOBNP`).

Bruk funksjonen `mutate()` til å lage en ny variabel med relativ endring i `BNP` og `MEMOBNP` i `df_wide` og lagre de som `DBNP` og `DMEMOBNP`.

```{r}
# Besvar oppgave IIb her 
df_wide2 <- df_wide %>%
  mutate(DBNP = 100*(BNP-LBNP)/LBNP) %>%
  mutate(DMEMOBNP = 100*(MEMOBNP-LMEMOBNP)/LMEMOBNP)
```

## Oppgave IIc: Omorganisere datasett med `pivot_longer()`

Bruk nå funksjonen `pivot_longer()` til å transformere `df_wide` til det opprinnelige formatet, altså med variablene `var` og `verdi`. Kall den transformerte tabellen for `df_long`.

**NB!** Husk å bruk anførselstegn (`"[variabelnavn]"`) når du definerer nye variable i `pivot_longer()`.

```{r}
# Besvar oppgave IIc 

#Gjør om kolonne 2-7 om til to nye kolonner kalt "var" og "verdi"
 df_long <- df_wide2 %>% 
  pivot_longer(cols = 2:7, names_to = "var", values_to = "verdi") %>% 
   
# runder av verdiene i kolonnen verdi til en desimal.
  mutate(verdi = round(verdi, 1))
```

## Oppgave IId: Figur med vekst

Lag en pen figur med prosentvis vekst i nominelt og reelt BNP per person fra 1970 til 2023. Finnes det observasjoner med negativ vekst i reell BNP? Hva skyldes dette?

**Merknad:** Det er en del støy i data. Prøv å kombinere `geom_point()` og `geom_smooth()` for å få et bedre inntrykk av den langsiktige utviklingen.

```{r}
# Besvar oppgave IId her
df_long %>%
  filter(var %in% c("DBNP", "DMEMOBNP")) %>% 
  filter(tid %in% 1970:2023) %>%
  filter(!is.na(verdi)) %>%
  ggplot(aes(x = tid, y = verdi, color = var)) +
  geom_point() +
  geom_smooth(linewidth = 0.5) +
  theme_minimal() + 
  labs(x = "Årstall", y = "Vekst i %", color = "", title = "BNP vekst") + 
  scale_color_discrete(labels = c("Løpende BNP", "Fast BNP")) +
  theme(legend.position = "bottom", plot.title = element_text(hjust = 0.5))
```
